#!/bin/bash

# Any failure causes exit
set -e

gem_dir=`pwd`

if [ -d $gem_dir/tmp/bundle ]
then
    echo Setting GEM_HOME=$gem_dir/tmp/bundle '(travis environment)'
    export GEM_HOME=$gem_dir/tmp/bundle
fi
if [ -d $gem_dir/bin ]
then
    echo Setting PATH=$gem_dir/bin:$PATH '(travis environment)'
    export PATH="$gem_dir/bin:$PATH"
fi

testurl=$gem_dir/test/testurl

test_dir=`pwd`/tmp
cd $test_dir
rm -rf Gemfile* railsapp bin

serverpid=''

finish()
{
       echo =========================================================================
       echo TEST ${1:-FAILED}
       echo =========================================================================
        if [ -d $test_dir/tmp/bundle ]
        then
            echo Gems installed:
            ls $test_dir/tmp/bundle
        fi
        if [ -s $test_dir/railsapp/log/test.log ]
        then
            echo Last 300 lines of test log
            tail -300 $test_dir/railsapp/log/test.log
        fi
        case "$serverpid" in
           [0-9]*)
                kill -9 $serverpid
                wait
                ;;
        esac
        trap "" 0
        exit ${2:-2}
}

trap "finish FAILED 1" 0

actual_rails_version=`rails -v`
echo "Creating $actual_rails_version app in $test_dir/railsapp"

case "$actual_rails_version" in
    *' '[12].*)
        rails railsapp
        ;;
    *' '[34].*)
        rails new railsapp
        ;;
    *)
        echo "Unknown rails version"
        ;;
esac

cd railsapp
echo "Changed current directory to railsapp root: `pwd`"

echo "Fixing rdoc require in Rakefile if needed"
ruby -pi.bak -e "gsub(/rake.rdoctask/, 'rdoc/task')" Rakefile

if [ -f Gemfile ]
then
    echo Installing health_check as gem ...
    echo "gem 'health_check', :path => '$gem_dir'" >> Gemfile
    bundle --binstubs --path $gem_dir/tmp/bundle
else
    echo Installing health_check as plugin ...
    dest=`pwd`/vendor/plugins/health_check
    mkdir -p $dest
    (
        cd $gem_dir
        find . | egrep -v '/tmp' | cpio -pdl $dest
    )
fi

port=3456
echo Starting server on port $port ...

if [ -x script/server ]
then
    script/server webrick -p $port &
else
    rails s webrick -p $port &
fi
server_pid=$!
trap "kill -9 $server_pid ; exit 9" 0

echo STATIC-FILE > public/static.txt

host=http://localhost:${port}

# get a static file
set -x
echo 'TESTING can get a static file ...'
$testurl ${host}/static.txt STATIC-FILE

echo 'TESTING health_check should pass with no database migrations ...'
mkdir -p db/migrate
ls db/migrate
$testurl ${host}/health_check success

echo 'TESTING health_check should fail without initial database migration ...'
cp $gem_dir/test/migrate/nine/* db/migrate
ls db/migrate
$testurl ${host}/health_check failed

echo 'TESTING health_check should pass after initial database migration ...'
rake db:migrate 
$testurl ${host}/health_check success

echo 'TESTING health_check should fail without all migrations ...'
cp $gem_dir/test/migrate/twelve/* db/migrate
ls db/migrate
$testurl ${host}/health_check failed

echo 'TESTING health_check should pass after both database migrations ...'
rake db:migrate 
$testurl ${host}/health_check success

if [ -d vendor/plugins/health_check ]
then
    echo "RUNNING UNIT TESTS...."
    rake test:plugins || test_failed
fi

echo "Killing server"
kill -9 $server_pid
trap "" 0
wait

finish PASSED 0
exit 0

# vi: sw=4 ai sm:
