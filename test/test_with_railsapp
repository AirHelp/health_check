#!/bin/bash

# Any failure causes exit
set -e

base_dir=`pwd`

testurl="$base_dir/test/testurl"
fake_smtp_server="$base_dir/test/fake_smtp_server"

test_dir=`pwd`/tmp
rm -rf tmp/Gemfile* tmp/railsapp tmp/bin tmp/gems
mkdir -p tmp/gems

echo Installing health_check as a gem into tmp/gems
env GEM_HOME=$test_dir/gems rake install

export GEM_PATH="$test_dir/gems:`gem environment gempath`"
echo Set GEM_PATH=$GEM_PATH

echo Gems in tmp/gems:
ls tmp/gems

echo GEM LIST
gem list

echo Environment:
env | egrep 'TRAVIS|RAILS|RUBY|_ENV|GEM|BUNDLE'

server_pid=''

finish()
{
    set +e
    set +x
    echo ========================================================
    echo TEST ${1:-FAILED}
    echo ========================================================
    ls -lR $test_dir/railsapp/log $test_dir/railsapp/db

    if [ -s $test_dir/railsapp/log/test.log ]
    then
        echo Last 300 lines of test log
        tail -300 $test_dir/railsapp/log/test.log
    fi

    case "$server_pid" in
        [0-9]*)
            echo "Killing rails server [pid: $server_pid]"
            kill -9 $server_pid 
            wait
            ;;
    esac
    trap "" 0
    exit ${2:-2}
}

trap "finish FAILED 1" 0

rails='rails'
if [ -x bin/rails ]
then
    rails='bin/rails'
fi
rake='rake'
if [ -x bin/rake ]
then
    rake='bin/rake'
fi


actual_rails_version=`$rails -v`
echo "Creating $actual_rails_version app in $test_dir/railsapp"

cd $test_dir

case `ruby -e 'puts JRUBY_VERSION' 2> /dev/null` in
    [0-9]*)
        db=jdbcsqlite3
        # Appears to need a bit extra time
        ;;
    *)
        db=sqlite3
        ;;
esac
case "$actual_rails_version" in
    *' '[12].*)
        $rails railsapp -d $db
        ;;
    *' '[34].*)
        $rails new railsapp -d $db
        ;;
    *)
        echo "Unknown rails version"
        ;;
esac

cd railsapp
echo "Changed current directory to railsapp root: `pwd`"

echo "Fixing rdoc require in Rakefile if needed"
ruby -p -i.bak -e '$_.gsub!(/rake.rdoctask/, "rdoc/task")' Rakefile

echo "Configuring mailer to point to fake_smtp_server port 3555"
cat >> config/environment.rb <<'!EOF!'


ActionMailer::Base.delivery_method = :smtp
ActionMailer::Base.smtp_settings = { :address => "localhost", :port => 3555 }

!EOF!

echo "Last ten lines of config/environment.rb:"
tail -10 config/environment.rb
echo 

if [ -f Gemfile ]
then
    echo Installing health_check as gem ...
    echo "gem 'health_check', :path => '$base_dir'" >> Gemfile
    echo Adding 
    echo "gem 'health_check', :path => '$base_dir'" >> Gemfile
    #gem 'rails', :git => 'git://github.com/rails/rails.git'

    case "$BUNDLE_GEMFILE" in
        ?*)
            echo Unsetting BUNDLE_GEMFILE '(so Gemfile will be used)'
            unset BUNDLE_GEMFILE
            ;;
    esac
    bundle --binstubs
    rails='bin/rails'
    rake='bin/rake'
else
    echo Installing health_check as plugin ...
    dest=`pwd`/vendor/plugins/health_check
    mkdir -p $dest
    (
        cd $base_dir
        find . | egrep -v '/tmp|/\.git|\.gem$' | cpio -pdl $dest
    )
fi

export RAILS_ENV=test RACK_ENV=test

case $db in
    jdbcsqlite3)
        echo
        echo 'Jruby requires the dastabase to be created before the server is started: running rake db:migrate'
        $rake db:migrate 
        echo
        ;;
esac

port=3456
echo Starting server on port $port ...

if [ -x script/server ]
then
    bundle exec ./script/server webrick -p $port &
else
    $rails s webrick -p $port &
fi
server_pid=$!

echo STATIC-FILE > public/static.txt

host=http://localhost:${port}

# get a static file
echo
echo 'TESTING can get a static file ...'
$testurl ${host}/static.txt STATIC-FILE
echo

echo 'TESTING health_check/migration should pass with no database migrations ...'
mkdir -p db/migrate
ls db/migrate
$testurl ${host}/health_check/migration success
echo

echo 'TESTING health_check/migration should fail without initial database migration ...'
cp $base_dir/test/migrate/nine/* db/migrate
ls db/migrate
$testurl ${host}/health_check/migration failed
echo

echo 'TESTING health_check/database should pass without initial database migration (since it ignores the difference) ...'
$testurl ${host}/health_check/database success
echo

echo 'TESTING health_check/site should pass ...'
$testurl ${host}/health_check/site success
echo

echo 'TESTING health_check/migration should pass after initial database migration ...'
$rake db:migrate 
$testurl ${host}/health_check/migration success
echo

echo 'TESTING health_check/migration should fail without all migrations ...'
cp $base_dir/test/migrate/twelve/* db/migrate
ls db/migrate
$testurl ${host}/health_check/migration failed
echo

echo 'TESTING health_check/migration should pass after both database migrations ...'
$rake db:migrate 
$testurl ${host}/health_check/migration success
echo

echo 'TESTING health_check/migration should pass after both database migrations ...'
$rake db:migrate 
$testurl ${host}/health_check/migration success
echo

echo 'TESTING health_check/email should fail without smtp available ...'
$testurl ${host}/health_check/email failed
echo

echo 'TESTING health_check/email should pass with smtp available ...'
$fake_smtp_server &
sleep 5
$testurl ${host}/health_check/email success
echo

echo 'TESTING health_check (all) should fail without smtp available ...'
$testurl ${host}/health_check failed
echo

echo 'TESTING health_check/all should fail without smtp available ...'
$testurl ${host}/health_check failed
echo

echo 'TESTING health_check (all) should pass with smtp available ...'
$fake_smtp_server &
sleep 5
$testurl ${host}/health_check success
echo

echo 'TESTING health_check/all should pass with smtp available ...'
$fake_smtp_server &
sleep 5
$testurl ${host}/health_check/all success
echo

finish PASSED 0
exit 0

# vi: sw=4 ai sm:
